
<div class="process-details" @onclick="onClose">
    <x-overlay />
    <div class="process @(initialized ? "initialized" : "")" @onclick:stopPropagation="true">
        <div class="process-name">@process.Name</div>
        <Button onClickAsync="OnStop">
            Stop
        </Button>
    </div>
</div>

<style>
    .process-details {
        z-index: 1;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 3em;
    }

    .process-details .process {
        background-color: var(--bg-color__group-title);
        max-width: 100%;
        max-height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        overflow: hidden;
        box-shadow: 0 0 3em -1em #000;
        padding: .75em;
        gap: .5em;
        translate: 0 -1em;
        opacity: 0;
        transition: .15s;
    }

    .process-details .process.initialized {
        translate: 0 0;
        opacity: 1;
    }
</style>

@code {

    [Parameter] public Process process { get; set; }
    [Parameter] public Func<Task> onStop { get; set; }
    [Parameter] public Action onClose { get; set; }

    bool initialized;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);
        initialized = true;
        StateHasChanged();
    }

    async Task OnStop()
    {
        await onStop();
        this.RenderLater();
    }

}
